l = 1,
nuisance = list(surv = list(method = "rfsrc"),
cens = list(method = "rfsrc"),
prop = list(method = "rfsrc"),
pseudoReg = list(method = "rfsrc")),
evaltimes = times,
tauLearner = "S",
folds = 1)
RFRFprob
correctGAMprob <- covVimSurv(time = obsTime,
status = delta,
treatment = A_fac,
confounders = xx,
l = 1,
nuisance = list(surv = list(method = "coxph", form = "x1*A+x2*A+x3+x4"),
cens = list(method = "coxph"),
prop = list(method = "glm", interactions = FALSE),
pseudoRegTau = list(method = "gam", interactions = TRUE),
pseudoRegTau = list(method = "gam", interactions = TRUE)),
evaltimes = times,
tauLearner = "S",
folds = 1)
correctGAMprob <- covVimSurv(time = obsTime,
status = delta,
treatment = A_fac,
confounders = xx,
l = 1,
nuisance = list(surv = list(method = "coxph", form = "x1*A+x2*A+x3+x4"),
cens = list(method = "coxph"),
prop = list(method = "glm", interactions = FALSE),
pseudoRegTau = list(method = "gam", interactions = TRUE),
pseudoRegX = list(method = "gam", interactions = TRUE)),
evaltimes = times,
tauLearner = "S",
folds = 1)
correctGAMprob
pseudoRegX = list(method = "rfsrc"),
correctGAMCFprob <- covVimSurv(time = obsTime,
status = delta,
treatment = A_fac,
confounders = xx,
l = 1,
nuisance = list(surv = list(method = "coxph", form = "x1*A+x2*A+x3+x4"),
cens = list(method = "coxph"),
prop = list(method = "glm", interactions = FALSE),
pseudoReg = list(method = "gam")),
evaltimes = times,
tauLearner = "S",
folds = 10)
correctGAMprob
correctGAMprob <- covVimSurv(time = obsTime,
status = delta,
treatment = A_fac,
confounders = xx,
l = 1,
nuisance = list(surv = list(method = "coxph", form = "x1*A+x2*A+x3+x4"),
cens = list(method = "coxph"),
prop = list(method = "glm", interactions = FALSE),
pseudoRegTau = list(method = "gam", interactions = TRUE),
pseudoRegX = list(method = "rfsrc", interactions = TRUE)),
evaltimes = times,
tauLearner = "S",
folds = 1)
correctGAMprob
pseudoRegX = list(method = "rfsrc"),
correctGAMprob <- covVimSurv(time = obsTime,
status = delta,
treatment = A_fac,
confounders = xx,
l = 1,
nuisance = list(surv = list(method = "coxph", form = "x1*A+x2*A+x3+x4"),
cens = list(method = "coxph"),
prop = list(method = "glm", interactions = FALSE),
pseudoRegTau = list(method = "gam", interactions = TRUE),
pseudoRegX = list(method = "rfsrc")),
evaltimes = times,
tauLearner = "S",
folds = 1)
correctGAMprob
correctGAMprob <- covVimSurv(time = obsTime,
status = delta,
treatment = A_fac,
confounders = xx,
l = 1,
nuisance = list(surv = list(method = "coxph", form = "x1*A+x2*A+x3+x4"),
cens = list(method = "coxph"),
prop = list(method = "glm", interactions = FALSE),
pseudoRegTau = list(method = "gam", interactions = TRUE),
pseudoRegX = list(method = "rfsrc")),
evaltimes = times,
tauLearner = "S",
folds = 1)
correctGAMprob
correctGAMprob <- covVimSurv(time = obsTime,
status = delta,
treatment = A_fac,
confounders = xx,
l = 1,
nuisance = list(surv = list(method = "coxph", form = "x1*A+x2*A+x3+x4"),
cens = list(method = "coxph"),
prop = list(method = "glm", interactions = FALSE),
pseudoRegTau = list(method = "gam", interactions = TRUE),
pseudoRegX = list(method = "gam", interactions = TRUE)),
evaltimes = times,
tauLearner = "S",
folds = 1)
correctGAMprob
rm(list=ls())
library(survival)
library(mgcv)
library(riskRegression)
f1_tmp <- list.files("functions", full.names = TRUE)
f1 <- f1_tmp[grepl(".R", f1_tmp)]
lapply(f1, source)
# Cox-Weibull distribution function and its invers
inv_weibull <- function(u, theta, scale, shape){
t <- (-log(u) / (scale * exp(theta))) ^ (1 / shape)
return(t)
}
weibull <- function(t, theta, scale, shape){
p <- exp(-scale*exp(theta)*t^shape)
return(p)
}
expit <- function(x) exp(x)/(1+exp(x))
# Set parameters
times <- 10                      # event horizon
shape <- 2                      # shape parameter for weibull distributed event times
scale <- 0.0025                    # scale parameter for weibull distributed event times
n <- 500
x1 <- rnorm(n)
x2 <- rnorm(n)
x3 <- rnorm(n)
x4 <- rnorm(n)
xx <- data.frame(x1,x2,x3,x4)
A <- rbinom(n, 1, expit(0.3*x1 + 0.3*x2))
A_fac <- factor(A)
eventTime <- inv_weibull(runif(n), theta = -x1 - x2 - 0.2*x3 + 0.1*x4 + A*(-2 + 0.5*x1 - 0.3*x2), scale = scale, shape = shape)
censTime <- inv_weibull(runif(n), theta = -0.3*x1, scale = 0.1*scale, shape = shape)
obsTime <- pmin(eventTime, censTime)
delta <- 1*(eventTime <= censTime)
correctGAMprob <- covVimSurv(time = obsTime,
status = delta,
treatment = A_fac,
confounders = xx,
l = 1,
nuisance = list(surv = list(method = "coxph", form = "x1*A+x2*A+x3+x4"),
cens = list(method = "coxph"),
prop = list(method = "glm", interactions = FALSE),
pseudoRegTau = list(method = "gam", interactions = TRUE),
pseudoRegX = list(method = "gam", interactions = TRUE)),
evaltimes = times,
tauLearner = "S",
folds = 1)
correctGAMprob <- covVimSurv(time = obsTime,
status = delta,
treatment = A_fac,
confounders = xx,
l = 1:2,
nuisance = list(surv = list(method = "coxph", form = "x1*A+x2*A+x3+x4"),
cens = list(method = "coxph"),
prop = list(method = "glm", interactions = FALSE),
pseudoRegTau = list(method = "gam", interactions = TRUE),
pseudoRegX = list(method = "gam", interactions = TRUE)),
evaltimes = times,
tauLearner = "S",
folds = 1)
cov1
correctGAMprob
correctGAMprob <- covVimSurv(time = obsTime,
status = delta,
treatment = A_fac,
confounders = xx,
l = 1,
nuisance = list(surv = list(method = "coxph", form = "x1*A+x2*A+x3+x4"),
cens = list(method = "coxph"),
prop = list(method = "glm", interactions = FALSE),
pseudoRegTau = list(method = "gam", interactions = TRUE),
pseudoRegX = list(method = "gam", interactions = TRUE)),
evaltimes = times,
tauLearner = "S",
folds = 1)
correctGAMCFprob <- covVimSurv(time = obsTime,
status = delta,
treatment = A_fac,
confounders = xx,
l = 1,
nuisance = list(surv = list(method = "coxph", form = "x1*A+x2*A+x3+x4"),
cens = list(method = "coxph"),
prop = list(method = "glm", interactions = FALSE),
pseudoRegTau = list(method = "gam", interactions = TRUE),
pseudoRegX = list(method = "gam", interactions = TRUE)),
evaltimes = times,
tauLearner = "S",
folds = 10)
correctRFprob <- covVimSurv(time = obsTime,
status = delta,
treatment = A_fac,
confounders = xx,
l = 1,
nuisance = list(surv = list(method = "coxph", form = "x1*A+x2*A+x3+x4"),
cens = list(method = "coxph"),
prop = list(method = "glm", interactions = FALSE),
pseudoRegTau = list(method = "rfsrc"),
pseudoRegX = list(method = "rfsrc")),
evaltimes = times,
tauLearner = "S",
folds = 1)
correctRFCFprob <- covVimSurv(time = obsTime,
status = delta,
treatment = A_fac,
confounders = xx,
l = 1,
nuisance = list(surv = list(method = "coxph", form = "x1*A+x2*A+x3+x4"),
cens = list(method = "coxph"),
prop = list(method = "glm", interactions = FALSE),
pseudoRegTau = list(method = "rfsrc"),
pseudoRegX = list(method = "rfsrc")),
evaltimes = times,
tauLearner = "S",
folds = 10)
# RF
RFGAMprob <- covVimSurv(time = obsTime,
status = delta,
treatment = A_fac,
confounders = xx,
l = 1,
nuisance = list(surv = list(method = "rfsrc"),
cens = list(method = "rfsrc"),
prop = list(method = "rfsrc"),
pseudoRegTau = list(method = "gam", interactions = TRUE),
pseudoRegX = list(method = "gam", interactions = TRUE)),
evaltimes = times,
tauLearner = "S",
folds = 1)
RFGAMCFprob <- covVimSurv(time = obsTime,
status = delta,
treatment = A_fac,
confounders = xx,
l = 1,
nuisance = list(surv = list(method = "rfsrc"),
cens = list(method = "rfsrc"),
prop = list(method = "rfsrc"),
pseudoRegTau = list(method = "gam", interactions = TRUE),
pseudoRegX = list(method = "gam", interactions = TRUE)),
evaltimes = times,
tauLearner = "S",
folds = 10)
RFRFprob <- covVimSurv(time = obsTime,
status = delta,
treatment = A_fac,
confounders = xx,
l = 1,
nuisance = list(surv = list(method = "rfsrc"),
cens = list(method = "rfsrc"),
prop = list(method = "rfsrc"),
pseudoRegTau = list(method = "rfsrc"),
pseudoRegX = list(method = "rfsrc")),
evaltimes = times,
tauLearner = "S",
folds = 1)
RFRFCFprob <- covVimSurv(time = obsTime,
status = delta,
treatment = A_fac,
confounders = xx,
l = 1,
nuisance = list(surv = list(method = "rfsrc"),
cens = list(method = "rfsrc"),
prop = list(method = "rfsrc"),
pseudoRegTau = list(method = "rfsrc"),
pseudoRegX = list(method = "rfsrc")),
evaltimes = times,
tauLearner = "S",
folds = 10)
rescorrectprob <- rbind(c(unlist(correctGAMprob), method = "correctGAM"),
c(unlist(correctGAMCFprob), method = "correctGAMCF"),
c(unlist(correctRFprob), method = "correctRF"),
c(unlist(correctRFCFprob), method = "correctRFCF"))
resrfprob <- rbind(c(unlist(RFRFprob), method = "RFRF"),
c(unlist(RFGAMprob), method = "RFGAM"),
c(unlist(RFRFCFprob), method = "RFRFCF"),
c(unlist(RFGAMCFprob), method = "RFGAMCF"))
resprob <- rbind(rescorrectprob, resrfprob)
resprob
rm(list=ls())
library(speff2trial)
library(riskRegression)
library(data.table)
library(randomForestSRC)
f1_tmp <- list.files("functions", full.names = TRUE)
f1 <- f1_tmp[grepl(".R", f1_tmp)]
lapply(f1, source)
data("ACTG175")
armstmp <- "02"
if(armstmp == "13"){
dat <- data.table(ACTG175)[arms %in% c(1, 3)]
dat[,A := as.factor(ifelse(arms == 1, 1, 0))]
} else if(armstmp == "02"){
dat <- data.table(ACTG175)[arms %in% c(0, 2)]
dat[,A := as.factor(ifelse(arms == 2, 1, 0))]
}
dat[,pidnum := NULL]
dat[,zprior := NULL]
dat[, strat := as.factor(strat)]
dat[, treat := NULL]
dat[, cd420 := NULL]
dat[, cd496 := NULL]
dat[, cd820 := NULL]
dat[, arms := NULL]
dat[, r := NULL]
dat[, strat := NULL]
dat[, oprior := NULL]
dat[, z30 := NULL]
dat[, preanti := NULL]
dat[, offtrt := NULL]
dat[, hemo := as.factor(hemo)]
dat[, homo := as.factor(homo)]
dat[, drugs := as.factor(drugs)]
dat[, race := as.factor(race)]
dat[, gender := as.factor(gender)]
dat[, str2 := as.factor(str2)]
dat[, symptom := as.factor(symptom)]
dat[karnof == 70, karnof := 80]
dat[, karnof := as.numeric(karnof)]
dat[, age := as.numeric(age)]
dat[, cd40 := as.numeric(cd40)]
dat[, cd80 := as.numeric(cd80)]
RFCF1 <- teVimSurvRes(time = dat$days,
status = dat$cens,
treatment = dat$A,
confounders = dat[, 1:12],
s = 1,
nuisance = list(surv = list(method = "rfsrc", interactions = FALSE),
cens = list(method = "rfsrc"),
prop = list(method = "rfsrc"),
pseudoReg = list(method = "rfsrc", interactions = FALSE)),
evaltimes = 1000,
tauLearner = "S",
folds = 10)
dat[,1:12]
RFCF1
expit(-0.561)
covVim <- covVimSurvRes(time = dat$days,
status = dat$cens,
treatment = dat$A,
confounders = dat[, 1:12],
l = 1:12,
nuisance = list(surv = list(method = "rfsrc"),
cens = list(method = "rfsrc"),
prop = list(method = "rfsrc"),
pseudoRegTau = list(method = "rfsrc"),
pseudoRegX = list(method = "rfsrc")),
tauLearner = "S",
evaltimes = 1000,
folds = 10)
covVim
covVim
covVim$modifiers[,c(1,7,9)]
rm(list=ls())
library(survival)
library(mgcv)
library(riskRegression)
# set path equal to path of current script
path <- getwd()
path
setwd("C:/Users/tmg225/Documents/github/causal-effect-on-the-number-of-life-years-lost")
f1_tmp <- list.files(paste0(path, "/functions"), full.names = TRUE)
f1 <- f1_tmp[grepl(".R", f1_tmp)]
lapply(f1, source)
# Cox-Weibull distribution function and its invers
inv_weibull <- function(u, theta, scale, shape){
t <- (-log(u) / (scale * exp(theta))) ^ (1 / shape)
return(t)
}
weibull <- function(t, theta, scale, shape){
p <- exp(-scale*exp(theta)*t^shape)
return(p)
}
expit <- function(x) exp(x)/(1+exp(x))
# Set parameters
times <- 30                      # event horizon
shape <- 2                      # shape parameter for weibull distributed event times
scale <- 0.0025                    # scale parameter for weibull distributed event times
n <- 500                       # number of observations
x1 <- runif(n, min = -1, max = 1)
x2 <- runif(n, min = -1, max = 1)
x3 <- runif(n, min = -1, max = 1)
x4 <- runif(n, min = -1, max = 1)
xx <- data.frame(x1,x2,x3,x4)
A <- rbinom(n, 1, expit(0.5*x1 + 0.5*x2))
survTime <- inv_weibull(runif(n), theta = -x1 - x2 - 0.2*x3 + A*(-2 + 0.5*x1 - 0.3*x2), scale = scale, shape = shape)
compTime <- inv_weibull(runif(n), theta = -x1 - x2 - 0.2*x3 + A, scale = 0.1*scale, shape = shape)
eventTime <- pmin(survTime, compTime)
censTime <- inv_weibull(runif(n), theta = -0.5*x1, scale = 0.1*scale, shape = shape)
obsTime <- pmin(eventTime, censTime)
delta <- 0*(censTime == obsTime) + 1*(survTime == obsTime) + 2*(compTime == obsTime)
A_fac <- factor(A)
correctGam <- covVimLyl(time = obsTime, status = delta, treatment = A_fac, confounders = xx,
l = 1:4,
evaltimes = times,
nuisance = list(surv = list(method = "coxph", form = "x1*A+x2*A+x3"),
comp = list(method = "coxph", form = "x1+x2+x3+A"),
cens = list(method = "coxph", form = "x1"),
prop = list(method = "glm"),
pseudoReg = list(method = "gam")),
tauLearner = "S",
folds = 1)
getwd()
f1_tmp
f1_tmp <- list.files(paste0(path, "/functions"), full.names = TRUE)
f1_tmp
# set path equal to path of current script
path <- getwd()
f1_tmp <- list.files(paste0(path, "/functions"), full.names = TRUE)
f1 <- f1_tmp[grepl(".R", f1_tmp)]
lapply(f1, source)
# Cox-Weibull distribution function and its invers
inv_weibull <- function(u, theta, scale, shape){
t <- (-log(u) / (scale * exp(theta))) ^ (1 / shape)
return(t)
}
weibull <- function(t, theta, scale, shape){
p <- exp(-scale*exp(theta)*t^shape)
return(p)
}
expit <- function(x) exp(x)/(1+exp(x))
# Set parameters
times <- 30                      # event horizon
shape <- 2                      # shape parameter for weibull distributed event times
scale <- 0.0025                    # scale parameter for weibull distributed event times
n <- 500                       # number of observations
x1 <- runif(n, min = -1, max = 1)
x2 <- runif(n, min = -1, max = 1)
x3 <- runif(n, min = -1, max = 1)
x4 <- runif(n, min = -1, max = 1)
xx <- data.frame(x1,x2,x3,x4)
A <- rbinom(n, 1, expit(0.5*x1 + 0.5*x2))
survTime <- inv_weibull(runif(n), theta = -x1 - x2 - 0.2*x3 + A*(-2 + 0.5*x1 - 0.3*x2), scale = scale, shape = shape)
compTime <- inv_weibull(runif(n), theta = -x1 - x2 - 0.2*x3 + A, scale = 0.1*scale, shape = shape)
eventTime <- pmin(survTime, compTime)
censTime <- inv_weibull(runif(n), theta = -0.5*x1, scale = 0.1*scale, shape = shape)
obsTime <- pmin(eventTime, censTime)
delta <- 0*(censTime == obsTime) + 1*(survTime == obsTime) + 2*(compTime == obsTime)
A_fac <- factor(A)
correctGam <- covVimLyl(time = obsTime, status = delta, treatment = A_fac, confounders = xx,
l = 1:4,
evaltimes = times,
nuisance = list(surv = list(method = "coxph", form = "x1*A+x2*A+x3"),
comp = list(method = "coxph", form = "x1+x2+x3+A"),
cens = list(method = "coxph", form = "x1"),
prop = list(method = "glm"),
pseudoReg = list(method = "gam")),
tauLearner = "S",
folds = 1)
RFRF <- covVimLyl(time = obsTime, status = delta, treatment = A_fac, confounders = xx,
l = 1:4,
evaltimes = times,
nuisance = list(surv = list(method = "rfsrc"),
comp = list(method = "rfsrc"),
cens = list(method = "rfsrc"),
prop = list(method = "rfsrc"),
pseudoRegTau = list(method = "rfsrc"),
pseudoRegX = list(method = "rfsrc")),
tauLearner = "S",
folds = 1)
RFRFCF <- covVimLyl(time = obsTime, status = delta, treatment = A_fac, confounders = xx,
l = 1:4,
evaltimes = times,
nuisance = list(surv = list(method = "rfsrc"),
comp = list(method = "rfsrc"),
cens = list(method = "rfsrc"),
prop = list(method = "rfsrc"),
pseudoRegTau = list(method = "rfsrc"),
pseudoRegX = list(method = "rfsrc")),
tauLearner = "S",
folds = 10)
# ATE estimates corresponding to section 5.1.
resAte <- data.frame(method = c("corGam", "corGamCF", "RFRF", "RFRFCF"),
rbind(correctGam$ate, correctGamCF$ate,
RFRF$ate, RFRFCF$ate))
correctGam <- covVimLyl(time = obsTime, status = delta, treatment = A_fac, confounders = xx,
l = 1:4,
evaltimes = times,
nuisance = list(surv = list(method = "coxph", form = "x1*A+x2*A+x3"),
comp = list(method = "coxph", form = "x1+x2+x3+A"),
cens = list(method = "coxph", form = "x1"),
prop = list(method = "glm"),
pseudoRegTau = list(method = "gam"),
pseudoRegX = list(method = "gam")),
tauLearner = "S",
folds = 1)
correctGamCF <- covVimLyl(time = obsTime, status = delta, treatment = A_fac, confounders = xx,
l = 1:4,
evaltimes = times,
nuisance = list(surv = list(method = "coxph", form = "x1*A+x2*A+x3"),
comp = list(method = "coxph", form = "x1+x2+x3+A"),
cens = list(method = "coxph", form = "x1"),
prop = list(method = "glm"),
pseudoRegTau = list(method = "gam"),
pseudoRegX = list(method = "gam")),
tauLearner = "S",
folds = 10)
# ATE estimates corresponding to section 5.1.
resAte <- data.frame(method = c("corGam", "corGamCF", "RFRF", "RFRFCF"),
rbind(correctGam$ate, correctGamCF$ate,
RFRF$ate, RFRFCF$ate))
# Best partially linear projection estimates corresponding to section 5.2.
resMod <- data.frame(method = c(rep("corGam", 4), rep("corGamCF", 4),
rep("RFRF", 4), rep("RFRFCF", 4)) ,
rbind(correctGam$modifiers, correctGamCF$modifiers,
RFRF$modifiers, RFRFCF$modifiers))
resAte
resMod
